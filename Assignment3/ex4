#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <math.h>
#include <time.h>
#include <mpi.h>

#define SEED     921
#define NUM_ITER 1000000000

int main(int argc, char* argv[])
{
    double x, y, z, pi;
    int rank, num_ranks, i, provided, global_sum;

    MPI_Init_thread(&argc, &argv, MPI_THREAD_SINGLE, &provided);

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &num_ranks);
    int local_count = 0;
    int local_iter = 0;

    int iter_per_process = NUM_ITER/num_ranks;

    srand(SEED * rank); 
    
    // Calculate PI following a Monte Carlo method
    for (int local_iter = rank*iter_per_process; local_iter < (rank + 1) * iter_per_process; local_iter++)
    {
        // Generate random (X,Y) points
        x = (double)random() / (double)RAND_MAX;
        y = (double)random() / (double)RAND_MAX;
        z = sqrt((x*x) + (y*y));
        
        // Check if point is in unit circle
        if (z <= 1.0)
        {
            local_count++;
        }
    }

    MPI_Reduce(&local_count, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        pi = ((double)global_sum / (double)NUM_ITER) * 4.0;
        
        printf("The result is %f\n", pi);
    
    }
    MPI_Finalize();

    
    return 0;
}
